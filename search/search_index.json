{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"VisualAlgo VisualAlgo is a collection of algorithms and models intersecting the domains of computer vision and neuroscience. The repository is categorized based on the major tasks/stages in visual processing. Each category includes relevant algorithms from both computer vision and neuroscience. Disclaimer This repository is created purely for educational purposes. It contains implementations of algorithms that might be copyrighted or protected by other legal means. The goal is to showcase these implementations as a personal project and to facilitate learning. Please note that while you are welcome to browse and learn from this code, I highly discourage using it directly in any production system or for any commercial purposes, as it may infringe upon the rights of the original algorithm authors or patent holders. For each algorithm implemented, aside from those widely used and commonly known, I have included citations and references to the original papers where they were presented. Always be sure to respect the rights of the original creators and acknowledge their work. It is your responsibility to ensure that you have the proper legal permission to use any code or concept presented here. This code is provided \"as is\" and without any warranties. The author of this repository is not responsible for any consequences that may arise from your use of the code. Please also note that this repository is currently a work in progress and may contain bugs.","title":"Home"},{"location":"#visualalgo","text":"VisualAlgo is a collection of algorithms and models intersecting the domains of computer vision and neuroscience. The repository is categorized based on the major tasks/stages in visual processing. Each category includes relevant algorithms from both computer vision and neuroscience.","title":"VisualAlgo"},{"location":"#disclaimer","text":"This repository is created purely for educational purposes. It contains implementations of algorithms that might be copyrighted or protected by other legal means. The goal is to showcase these implementations as a personal project and to facilitate learning. Please note that while you are welcome to browse and learn from this code, I highly discourage using it directly in any production system or for any commercial purposes, as it may infringe upon the rights of the original algorithm authors or patent holders. For each algorithm implemented, aside from those widely used and commonly known, I have included citations and references to the original papers where they were presented. Always be sure to respect the rights of the original creators and acknowledge their work. It is your responsibility to ensure that you have the proper legal permission to use any code or concept presented here. This code is provided \"as is\" and without any warranties. The author of this repository is not responsible for any consequences that may arise from your use of the code. Please also note that this repository is currently a work in progress and may contain bugs.","title":"Disclaimer"},{"location":"pages/attention-and-search/","text":"8. Attention and Search Computer Vision Algorithms Selective Search Neuroscience Models Feature Integration Theory Biased Competition Model","title":"8. Attention and Search"},{"location":"pages/attention-and-search/#8-attention-and-search","text":"","title":"8. Attention and Search"},{"location":"pages/attention-and-search/#computer-vision-algorithms","text":"Selective Search","title":"Computer Vision Algorithms"},{"location":"pages/attention-and-search/#neuroscience-models","text":"Feature Integration Theory Biased Competition Model","title":"Neuroscience Models"},{"location":"pages/color-vision/","text":"7. Color Vision Computer Vision Algorithms Gamma Compression Neuroscience Models Opponent Process Models Retinex Theory","title":"7. Color Vision"},{"location":"pages/color-vision/#7-color-vision","text":"","title":"7. Color Vision"},{"location":"pages/color-vision/#computer-vision-algorithms","text":"Gamma Compression","title":"Computer Vision Algorithms"},{"location":"pages/color-vision/#neuroscience-models","text":"Opponent Process Models Retinex Theory","title":"Neuroscience Models"},{"location":"pages/depth-perception-and-3d-reconstruction/","text":"6. Depth Perception and 3D Reconstruction Computer Vision Algorithms Stereo Vision Struction from Motion (SfM), SLAM Image Stiching Neuroscience Models Binocular Disparity Models Motion Parallax Models","title":"6. Depth Perception and 3D Reconstruction"},{"location":"pages/depth-perception-and-3d-reconstruction/#6-depth-perception-and-3d-reconstruction","text":"","title":"6. Depth Perception and 3D Reconstruction"},{"location":"pages/depth-perception-and-3d-reconstruction/#computer-vision-algorithms","text":"Stereo Vision Struction from Motion (SfM), SLAM Image Stiching","title":"Computer Vision Algorithms"},{"location":"pages/depth-perception-and-3d-reconstruction/#neuroscience-models","text":"Binocular Disparity Models Motion Parallax Models","title":"Neuroscience Models"},{"location":"pages/feature-extraction/","text":"2. Feature Extraction Computer Vision Algorithms Canny Edge Detection Corner Detection Blob Detection SIFT SURF ORB HOG Neuroscience Models Simple and Complex Cell Models","title":"2. Feature Extraction"},{"location":"pages/feature-extraction/#2-feature-extraction","text":"","title":"2. Feature Extraction"},{"location":"pages/feature-extraction/#computer-vision-algorithms","text":"Canny Edge Detection Corner Detection Blob Detection SIFT SURF ORB HOG","title":"Computer Vision Algorithms"},{"location":"pages/feature-extraction/#neuroscience-models","text":"Simple and Complex Cell Models","title":"Neuroscience Models"},{"location":"pages/getting-started/","text":"Getting Started","title":"Getting Started"},{"location":"pages/getting-started/#getting-started","text":"","title":"Getting Started"},{"location":"pages/image-processing-and-enhancement/","text":"1. Image Pre-processing and Enhancement Computer Vision Algorithms Histogram Equalization Neuroscience Models Center-Surround Model","title":"1. Image Processing and Enhancement"},{"location":"pages/image-processing-and-enhancement/#1-image-pre-processing-and-enhancement","text":"","title":"1. Image Pre-processing and Enhancement"},{"location":"pages/image-processing-and-enhancement/#computer-vision-algorithms","text":"Histogram Equalization","title":"Computer Vision Algorithms"},{"location":"pages/image-processing-and-enhancement/#neuroscience-models","text":"Center-Surround Model","title":"Neuroscience Models"},{"location":"pages/learning-and-memory/","text":"9. Learning and Memory Computer Vision Algorithms Deep Learning Models (CNN, Autoencoders, GAN, Transformers) Neuroscience Models Hopfield Network Adaptive Resonance Theory (ART)","title":"9. Learning and Memory"},{"location":"pages/learning-and-memory/#9-learning-and-memory","text":"","title":"9. Learning and Memory"},{"location":"pages/learning-and-memory/#computer-vision-algorithms","text":"Deep Learning Models (CNN, Autoencoders, GAN, Transformers)","title":"Computer Vision Algorithms"},{"location":"pages/learning-and-memory/#neuroscience-models","text":"Hopfield Network Adaptive Resonance Theory (ART)","title":"Neuroscience Models"},{"location":"pages/matrix/","text":"Matrix Class Documentation The Matrix class provides a two-dimensional matrix object, along with numerous methods for performing operations on the matrix. Include #include \"helpers/matrix.hpp\" Class Attributes rows ( int ): The number of rows in the matrix. cols ( int ): The number of columns in the matrix. data ( vector<vector<float>> ): A 2D vector that holds the matrix data. Constructors Matrix(int rows, int cols) : Constructs a new Matrix object with the given number of rows and columns. The matrix is initialized with all elements set to 0. VisualAlgo::Matrix m(3, 4); // Creates a 3x4 matrix with all elements initialized to 0 Matrix(int rows, int cols, float value) : Constructs a new Matrix object with the given number of rows and columns. The matrix is initialized with all elements set to the provided value. VisualAlgo::Matrix m(3, 4, 1.0); // Creates a 3x4 matrix with all elements initialized to 1.0 Matrix(vector<vector<float>> data) : Constructs a new Matrix object with the provided 2D vector data. std::vector<std::vector<float>> data = {{1.0, 2.0, 3.0}, {4.0, 5.0, 6.0}}; VisualAlgo::Matrix m(data); // Creates a 2x3 matrix with the provided data or VisualAlgo::Matrix m({{1.0, 2.0, 3.0}, {4.0, 5.0, 6.0}}); Matrix(const Matrix &other) : Copy constructor. Constructs a new Matrix object that is a copy of the provided matrix. VisualAlgo::Matrix m1(3, 4, 1.0); VisualAlgo::Matrix m2(m1); // Creates a new matrix that is a copy of m1 Element-wise Operations Element-wise operations perform the operation on each element of the matrix independently. Matrix &operator=(const Matrix &other) : Assignment operator. Copies the provided matrix to the current matrix. VisualAlgo::Matrix m1(3, 4, 1.0); VisualAlgo::Matrix m2 = m1; // m2 is now a copy of m1 Matrix operator+(const Matrix &other) : Adds the provided matrix to the current matrix. VisualAlgo::Matrix m1(2, 2, 1.0); VisualAlgo::Matrix m2(2, 2, 2.0); VisualAlgo::Matrix m3 = m1 + m2; // m3 is now a 2x2 matrix with all elements set to 3.0 Matrix operator+(const float &other) : Add the provided float to all entries. Also support other common arithmetic operators. Matrix Operations Matrix transpose() : Returns the transpose of the current matrix. VisualAlgo::Matrix m1(2, 3, 1.0); VisualAlgo::Matrix m2 = m1.transpose(); // m2 is now a 3x2 matrix float dot(const Matrix &other) : Calculates the dot product of the current matrix with the provided matrix. VisualAlgo::Matrix m1(3, 3, 1.0); VisualAlgo::Matrix m2(3, 3, 2.0); float result = m1.dot(m2); // result is now 18 Matrix Matrix::matmul(const Matrix &other) : Matrix multiplication. auto m1 = Matrix({{1, 2, 3}, {4, 5, 6}}); auto m2 = Matrix({{10, 11}, {20, 21}, {30, 31}}); auto m3 = m1.matmul(m2); Accessors void set(int row, int col, float value) : Sets the value at the specified row and column in the matrix. VisualAlgo::Matrix m(3, 4, 0.0); m.set(1, 2, 1.0); // Sets the value at row 1, column 2 to 1.0 const float get(int row, int col) const : Returns the value at the specified row and column in the matrix. VisualAlgo::Matrix m(3, 4, 1.0); float value = m.get(2, 3); // Gets the value at row 2, column 3 std::vector<float> &operator[](int row) : Returns the row at the specified index in the matrix. VisualAlgo::Matrix m(3, 4, 1.0); std::vector<float> row = m[1]; // Gets the second row of the matrix Statistics float sum() : Returns the sum of all elements in the matrix. VisualAlgo::Matrix m(2, 3, 1.0); float sum = m.sum(); // sum is now 6.0 float mean() : Returns the mean (average) of all elements in the matrix. VisualAlgo::Matrix m(2, 3, 1.0); float mean = m.mean(); // mean is now 1.0 Also supports std() , max() , and min() operations.","title":"Matrix"},{"location":"pages/matrix/#matrix-class-documentation","text":"The Matrix class provides a two-dimensional matrix object, along with numerous methods for performing operations on the matrix.","title":"Matrix Class Documentation"},{"location":"pages/matrix/#include","text":"#include \"helpers/matrix.hpp\"","title":"Include"},{"location":"pages/matrix/#class-attributes","text":"rows ( int ): The number of rows in the matrix. cols ( int ): The number of columns in the matrix. data ( vector<vector<float>> ): A 2D vector that holds the matrix data.","title":"Class Attributes"},{"location":"pages/matrix/#constructors","text":"Matrix(int rows, int cols) : Constructs a new Matrix object with the given number of rows and columns. The matrix is initialized with all elements set to 0. VisualAlgo::Matrix m(3, 4); // Creates a 3x4 matrix with all elements initialized to 0 Matrix(int rows, int cols, float value) : Constructs a new Matrix object with the given number of rows and columns. The matrix is initialized with all elements set to the provided value. VisualAlgo::Matrix m(3, 4, 1.0); // Creates a 3x4 matrix with all elements initialized to 1.0 Matrix(vector<vector<float>> data) : Constructs a new Matrix object with the provided 2D vector data. std::vector<std::vector<float>> data = {{1.0, 2.0, 3.0}, {4.0, 5.0, 6.0}}; VisualAlgo::Matrix m(data); // Creates a 2x3 matrix with the provided data or VisualAlgo::Matrix m({{1.0, 2.0, 3.0}, {4.0, 5.0, 6.0}}); Matrix(const Matrix &other) : Copy constructor. Constructs a new Matrix object that is a copy of the provided matrix. VisualAlgo::Matrix m1(3, 4, 1.0); VisualAlgo::Matrix m2(m1); // Creates a new matrix that is a copy of m1","title":"Constructors"},{"location":"pages/matrix/#element-wise-operations","text":"Element-wise operations perform the operation on each element of the matrix independently. Matrix &operator=(const Matrix &other) : Assignment operator. Copies the provided matrix to the current matrix. VisualAlgo::Matrix m1(3, 4, 1.0); VisualAlgo::Matrix m2 = m1; // m2 is now a copy of m1 Matrix operator+(const Matrix &other) : Adds the provided matrix to the current matrix. VisualAlgo::Matrix m1(2, 2, 1.0); VisualAlgo::Matrix m2(2, 2, 2.0); VisualAlgo::Matrix m3 = m1 + m2; // m3 is now a 2x2 matrix with all elements set to 3.0 Matrix operator+(const float &other) : Add the provided float to all entries. Also support other common arithmetic operators.","title":"Element-wise Operations"},{"location":"pages/matrix/#matrix-operations","text":"Matrix transpose() : Returns the transpose of the current matrix. VisualAlgo::Matrix m1(2, 3, 1.0); VisualAlgo::Matrix m2 = m1.transpose(); // m2 is now a 3x2 matrix float dot(const Matrix &other) : Calculates the dot product of the current matrix with the provided matrix. VisualAlgo::Matrix m1(3, 3, 1.0); VisualAlgo::Matrix m2(3, 3, 2.0); float result = m1.dot(m2); // result is now 18 Matrix Matrix::matmul(const Matrix &other) : Matrix multiplication. auto m1 = Matrix({{1, 2, 3}, {4, 5, 6}}); auto m2 = Matrix({{10, 11}, {20, 21}, {30, 31}}); auto m3 = m1.matmul(m2);","title":"Matrix Operations"},{"location":"pages/matrix/#accessors","text":"void set(int row, int col, float value) : Sets the value at the specified row and column in the matrix. VisualAlgo::Matrix m(3, 4, 0.0); m.set(1, 2, 1.0); // Sets the value at row 1, column 2 to 1.0 const float get(int row, int col) const : Returns the value at the specified row and column in the matrix. VisualAlgo::Matrix m(3, 4, 1.0); float value = m.get(2, 3); // Gets the value at row 2, column 3 std::vector<float> &operator[](int row) : Returns the row at the specified index in the matrix. VisualAlgo::Matrix m(3, 4, 1.0); std::vector<float> row = m[1]; // Gets the second row of the matrix","title":"Accessors"},{"location":"pages/matrix/#statistics","text":"float sum() : Returns the sum of all elements in the matrix. VisualAlgo::Matrix m(2, 3, 1.0); float sum = m.sum(); // sum is now 6.0 float mean() : Returns the mean (average) of all elements in the matrix. VisualAlgo::Matrix m(2, 3, 1.0); float mean = m.mean(); // mean is now 1.0 Also supports std() , max() , and min() operations.","title":"Statistics"},{"location":"pages/motion-analysis-and-tracking/","text":"5. Motion Analysis and Tracking Computer Vision Algorithms Optical Flow Background Subtraction Kalman Filter CAMShift Neuroscience Models Reichardt Detectors Motion Energy Models","title":"5. Motion Analysis and Tracking"},{"location":"pages/motion-analysis-and-tracking/#5-motion-analysis-and-tracking","text":"","title":"5. Motion Analysis and Tracking"},{"location":"pages/motion-analysis-and-tracking/#computer-vision-algorithms","text":"Optical Flow Background Subtraction Kalman Filter CAMShift","title":"Computer Vision Algorithms"},{"location":"pages/motion-analysis-and-tracking/#neuroscience-models","text":"Reichardt Detectors Motion Energy Models","title":"Neuroscience Models"},{"location":"pages/object-detection-and-recognition/","text":"4. Object Detection and Recognition Computer Vision Algorithms Viola-Jones R-CNN SSD YOLO Haar Cascades Neuroscience Models HMAX Model","title":"4. Object Detection and Recognition"},{"location":"pages/object-detection-and-recognition/#4-object-detection-and-recognition","text":"","title":"4. Object Detection and Recognition"},{"location":"pages/object-detection-and-recognition/#computer-vision-algorithms","text":"Viola-Jones R-CNN SSD YOLO Haar Cascades","title":"Computer Vision Algorithms"},{"location":"pages/object-detection-and-recognition/#neuroscience-models","text":"HMAX Model","title":"Neuroscience Models"},{"location":"pages/segmentation-and-grouping/","text":"3. Segmentation and Grouping Computer Vision Algorithms Region Growing Watershed K-means Clustering Mean Shift GrabCut U-Net Region Proposal Network (RPN) Neuroscience Models FBF Model (Grossberg and Wyse, 1991) : CONFIGR (Carpenter, Gaddam, and Mingolla, 2007) : Tolerance Space Theory (TST) for Gestalt Proximity Principle (Peng, Yang, and Li, 2021) : Gestalt Laws Models Border Ownership Models","title":"3. Segmentation and Grouping"},{"location":"pages/segmentation-and-grouping/#3-segmentation-and-grouping","text":"","title":"3. Segmentation and Grouping"},{"location":"pages/segmentation-and-grouping/#computer-vision-algorithms","text":"Region Growing Watershed K-means Clustering Mean Shift GrabCut U-Net Region Proposal Network (RPN)","title":"Computer Vision Algorithms"},{"location":"pages/segmentation-and-grouping/#neuroscience-models","text":"FBF Model (Grossberg and Wyse, 1991) : CONFIGR (Carpenter, Gaddam, and Mingolla, 2007) : Tolerance Space Theory (TST) for Gestalt Proximity Principle (Peng, Yang, and Li, 2021) : Gestalt Laws Models Border Ownership Models","title":"Neuroscience Models"}]}